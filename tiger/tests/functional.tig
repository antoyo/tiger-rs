let type intfun = int -> int

    function add(n: int) : intfun =
        let var h := function(m: int) : int =
            n + m
        in
            h
        end

    var addFive : intfun := add(5)
    var addSeven : intfun := add(7)
    var twenty := addFive(15)
    var twentyTwo := addSeven(15)

    function twice(f: intfun) : intfun =
        let var g := function(x: int) : int =
            f(f(x))
        in
            g
        end

    var addTen: intfun := twice(addFive)
    var seventeen := twice(add(5))(7)
    var addTwentyFour := twice(twice(add(6)))

    function getClosure() : intfun =
        let var closure := function(m: int) : int =
            m + 2
        in
            closure
        end

    var closure := function(m: int) : int =
        m + 1

    function intToString(i: int): string =
        let function loop(acc: string, i: int): string =
            if i = 0 then
                acc
            else
                let var rest := i / 10
                    var dig := i - rest * 10
                    function doDigit(): string =
                        concat(chr(dig + ord("0")), acc)
                in
                    loop(doDigit(), rest)
                end
        in
            if i = 0 then
                "0"
            else if i < 0 then
                concat("-", loop("", -i))
            else
                loop("", i)
        end

    var n1 := concat(intToString(addFive(10)), "\n")
    var n2 := concat(concat(n1, intToString(closure(10))), "\n")
    var n3 := concat(concat(n2, intToString(getClosure()(12))), "\n")
    var n4 := concat(concat(n3, intToString(twenty)), "\n")
    var n5 := concat(concat(n4, intToString(twentyTwo)), "\n")
    var n6 := concat(concat(n5, intToString(addTen(2))), "\n")
    var n7 := concat(concat(n6, intToString(addTwentyFour(seventeen))), "\n")
in
    print(n7, tigerExit)
end
